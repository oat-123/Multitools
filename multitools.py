import streamlit as st
import webbrowser
import subprocess
import pandas as pd
import random
from collections import defaultdict
from openpyxl.styles import Alignment, Border, Side
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import date
import io
from collections import defaultdict

st.image("assist.jpg", width=120)
st.markdown("<h1 style='text-align: center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ ‡∏ù‡∏≠.1 <span style='color:#1f77b4;'>J.A.R.V.I.S</span></h1>", unsafe_allow_html=True)
st.markdown("<hr style='border:1px solid #bbb;'>", unsafe_allow_html=True)


# ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏ä‡πà‡∏ô 3 ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô)
col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    if st.button("‡πÄ‡∏ß‡∏£‡∏¢‡∏∑‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô", use_container_width=True):
        st.session_state["mode"] = "night_duty"

with col2:
    if st.button("‡πÄ‡∏ß‡∏£‡πÄ‡∏™‡∏≤-‡∏≠‡∏≤", use_container_width=True):
        st.session_state["mode"] = "weekend_duty"

with col3:
    if st.button("‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ", use_container_width=True):
        st.session_state["mode"] = "ceremony_duty"

with col4:
    if st.button("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢", use_container_width=True):
        st.session_state["mode"] = "home"

with col5:
    if st.button("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î", use_container_width=True):
        st.session_state["mode"] = "count"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á UI ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
mode = st.session_state.get("mode", None)

if mode == "night_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ß‡∏£‡∏¢‡∏∑‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô")
        # ‡∏•‡∏¥‡∏á‡∏Å‡πå CSV export (‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÅ‡∏£‡∏Å)
    csv_url = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/export?format=csv"

    try:
        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
        sheet_option = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏ä‡∏µ‡∏ó",
            ("‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏ß‡∏£", "‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)")
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if sheet_option == "‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏ß‡∏£":
            iframe_link = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8pO9068jsukCJL0guT_dF7I5cjYMMIhsu7ah-1DkPxSMxnYFsSkuRgffvSUJKVZzQccQyJEOPxvvg/pubhtml?gid=0&single=true&range=A1:I100"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£
            edit_link = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/edit#gid=0"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£
        else:
            iframe_link = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8pO9068jsukCJL0guT_dF7I5cjYMMIhsu7ah-1DkPxSMxnYFsSkuRgffvSUJKVZzQccQyJEOPxvvg/pubhtml?gid=2030248910&single=true&range=A1:I100"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
            edit_link = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/edit#gid=1"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
        
        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏±‡∏á iframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        st.markdown(f"""
            <style>
                .iframe-container {{
                    border: 2px solid #4CAF50;
                    border-radius: 10px;
                    overflow: hidden;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }}
                .iframe-container iframe {{
                    width: 100%;
                    height: 600px;
                    border: none;
                    zoom: 0.75;
                }}
                .edit-link {{
                    text-align: right;
                    margin-top: 10px;
                    background-color: #4CAF50;
                    padding: 10px;
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }}
                .edit-link a {{
                    color: white;
                    font-size: 16px;
                    text-decoration: none;
                    font-weight: bold;
                    transition: all 0.3s ease;
                }}
                .edit-link a:hover {{
                    color: #FFEB3B;
                    text-decoration: underline;
                }}
            </style>
            <div class="iframe-container">
                <iframe src="{iframe_link}"></iframe>
            </div>
            <div class="edit-link">
                <a href="{edit_link}" target="_blank">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Google Sheets ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a>
            </div>
        """, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

elif mode == "weekend_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ß‡∏£‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå")
    st.markdown("https://docs.google.com/spreadsheets/d/1ufm0LPa4c903jhlANKn_YqNyMtG9id0iN-tMHrhNRA8/edit?gid=1888956716#gid=1888956716")

elif mode == "home":
    st.header("üìã ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢")

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢", date.today())
    with col2:
        end_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏£.", date.today())
    
    # ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ
    defaults = {5: 67, 4: 101, 3: 94, 2: 85}
    
    categories = [
        "‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        "‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    
    # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡πÄ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ")
    data = {}
    for year in [5, 4, 3, 2]:
        data[year] = {}
        with st.expander(f"‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {year}"):
            for cat in categories:
                val = st.number_input(f"{cat} ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {year}", min_value=0, step=1, key=f"{cat}_{year}")
                data[year][cat] = val
    
    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"):
        lines = []
        start_str = start_date.strftime("%-d %b").replace("May", "‡∏û.‡∏Ñ.").replace("Jun", "‡∏°‡∏¥.‡∏¢.")
        end_str = end_date.strftime("%-d %b %y").replace("May", "‡∏û.‡∏Ñ.").replace("Jun", "‡∏°‡∏¥.‡∏¢.")
        
        lines.append(f"‡∏û‡∏±‡∏ô.4 ‡∏Å‡∏£‡∏° ‡∏ô‡∏ô‡∏£.‡∏£‡∏≠. ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏¢‡∏≠‡∏î ‡∏ô‡∏ô‡∏£. ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô, ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà   {start_str} - {end_str} ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ")
    
        for y in [5, 4, 3, 2]:
            lines.append(f"‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏° {defaults[y]} ‡∏ô‡∏≤‡∏¢")
    
        def section(title, key):
            lines.append(f"{key+1}.{title}")
            total = 0
            for y in [5, 4, 3, 2]:
                val = data[y].get(title, 0)
                total += val
                show_val = f"{val}" if val != 0 else "-"
                lines.append(f"   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {show_val} ‡∏ô‡∏≤‡∏¢")
            show_total = f"{total}" if total != 0 else "-"
            lines.append(f"   -‡∏£‡∏ß‡∏° {show_total} ‡∏ô‡∏≤‡∏¢")
    
        # 1. ‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ö‡πâ‡∏≤‡∏ô = ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏° - (‡∏¢‡∏≠‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ)
        lines.append("1.‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô")
        total_home = 0
        for y in [5, 4, 3, 2]:
            sum_others = sum(data[y].values())
            val = defaults[y] - sum_others
            total_home += val
            lines.append(f"   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {val} ‡∏ô‡∏≤‡∏¢")
        lines.append(f"   -‡∏£‡∏ß‡∏° {total_home} ‡∏ô‡∏≤‡∏¢")
    
        # ‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
        for i, cat in enumerate(["‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], start=2):
            section(cat, i)
    
        lines.append("‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏£‡∏≤‡∏ö")
    
        st.text_area("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î", value="\n".join(lines), height=600)

elif mode == "count":
    # 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢
    ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ = st.slider("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏ô‡∏µ‡πâ (1‚Äì5)", 1, 5, 3)
    
    # 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î
    ‡∏¢‡∏≠‡∏î_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î (.xlsx)", type="xlsx")
    
    # 2. ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4 = pd.read_excel("‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4.xlsx")
    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á: ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4 ‡πÅ‡∏•‡∏∞ ‡∏¢‡∏≠‡∏î_df
    ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] = ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4["‡∏ä‡∏∑‡πà‡∏≠"].astype(str).str.strip() + " " + ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4["‡∏™‡∏Å‡∏∏‡∏•"].astype(str).str.strip()
    ‡∏¢‡∏≠‡∏î_df["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] = ‡∏¢‡∏≠‡∏î_df["‡∏ä‡∏∑‡πà‡∏≠"].astype(str).str.strip() + " " + ‡∏¢‡∏≠‡∏î_df["‡∏™‡∏Å‡∏∏‡∏•"].astype(str).str.strip()
    
    # 3. ‡πÇ‡∏´‡∏•‡∏î‡∏¢‡∏≠‡∏î
    if ‡∏¢‡∏≠‡∏î_file:
        ‡∏¢‡∏≠‡∏î_df = pd.read_excel(‡∏¢‡∏≠‡∏î_file, header=2)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏´‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á
        ‡∏¢‡∏≠‡∏î_df.columns = ‡∏¢‡∏≠‡∏î_df.columns.str.strip()
    
        def check_update(row):
            if row["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] in ‡∏¢‡∏≠‡∏î_df["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"].values:
                return row["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] + ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢
            else:
                return row["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"]
        
        ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] = ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4.apply(check_update, axis=1)
        # ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        from io import BytesIO
        output = BytesIO()
        ‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4.to_excel(output, index=False)
        st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", output.getvalue(), file_name="‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4_‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï.xlsx")
        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ")


elif mode == "ceremony_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    @st.cache_data
    def load_data():
        return pd.read_excel("‡∏ä‡∏±‡πâ‡∏ô4‡∏û‡∏±‡∏ô4.xlsx")

    df = load_data()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    st.write("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå:")
    st.dataframe(df.head())

    # ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    ‡∏¢‡∏≠‡∏î_name = st.text_input("üîñ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏î")
    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô = st.number_input("üë•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô", min_value=1, step=1)
    ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà = st.multiselect("‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", ["‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏°", "‡∏ä‡∏±‡πâ‡∏ô‡∏û‡∏±‡∏ô", "‡∏ù‡∏≠.1", "‡∏ù‡∏≠.4", "‡∏ù‡∏≠.5"])

    if st.button("üöÄ ‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
        required_cols = ["‡∏¢‡∏®", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà", "‡∏ï‡∏≠‡∏ô", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"]
        for col in required_cols:
            if col not in df.columns:
                st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: '{col}' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
                st.stop()

        df_filtered = df[~df["‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"].isin(‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)]
        grouped = df_filtered.groupby("‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î")
        ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î_list = list(grouped.groups.keys())

        from collections import defaultdict
        ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î = defaultdict(list)

        while sum(len(v) for v in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values()) < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô:
            for ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î in ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î_list:
                available = grouped.get_group(‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î)
                used_indices = set().union(*‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values())
                choices = available[~available.index.isin(used_indices)]
                if not choices.empty and sum(len(v) for v in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values()) < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô:
                    chosen = choices.sample(1)
                    ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î[‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î].append(chosen.index[0])

        selected_indices = [i for indices in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values() for i in indices]
        selected_df = df.loc[selected_indices].copy()
        selected_df = selected_df.reset_index(drop=True)
        selected_df.index += 1

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        selected_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", selected_df.index)

        # ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠
        selected_df["‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] = (
            selected_df["‡∏¢‡∏®"].fillna("") + " " +
            selected_df["‡∏ä‡∏∑‡πà‡∏≠"].fillna("") + " " +
            selected_df["‡∏™‡∏Å‡∏∏‡∏•"].fillna("")
        )

        # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà", "‡∏ï‡∏≠‡∏ô", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
        output_df = selected_df[columns]

        st.write("‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î:")
        st.dataframe(output_df)

        # ----------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel -----------
        from openpyxl import Workbook
        from openpyxl.utils.dataframe import dataframe_to_rows
        from openpyxl.styles import Alignment, Border, Side

        wb = Workbook()
        ws = wb.active
        ws.title = "‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ"

        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡∏≠‡∏î
        ws.append([‡∏¢‡∏≠‡∏î_name])
        ws.append([])

        # ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        ws.append(columns)

        # Merge ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ (B3-D3)
        ws.merge_cells(start_row=3, start_column=2, end_row=3, end_column=4)
        ws.cell(row=3, column=2).alignment = Alignment(horizontal='center', vertical='center')

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for r in dataframe_to_rows(output_df, index=False, header=False):
            ws.append(r)

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'),
                             top=Side(style='thin'), bottom=Side(style='thin'))

        for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
            for cell in row:
                cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = thin_border

        # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        col_widths = [6, 5, 15, 15, 8, 8, 20, 15, 15]
        for i, width in enumerate(col_widths, 1):
            col_letter = chr(64 + i)
            ws.column_dimensions[col_letter].width = width

        ws.merge_cells('A1:I1')
        ws['A1'].alignment = Alignment(horizontal='center', vertical='center')

        output_filename = f"{‡∏¢‡∏≠‡∏î_name}.xlsx"
        wb.save(output_filename)

        # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        st.success(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_filename}")
        with open(output_filename, "rb") as f:
            st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", f, file_name=output_filename)


st.markdown("<hr style='border:0.5px solid #ccc;'>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>J.A.R.V.I.S ¬© 2025 | Dev by Oat</p>", unsafe_allow_html=True)

