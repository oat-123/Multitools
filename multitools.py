import streamlit as st
import webbrowser
import subprocess
import pandas as pd
import random
from collections import defaultdict
from openpyxl.styles import Alignment, Border, Side
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from datetime import date
import io
from collections import defaultdict
import gspread
from google.oauth2.service_account import Credentials
from google.oauth2 import service_account

# ===== ‡∏£‡∏∞‡∏ö‡∏ö Login =====
users = {
    "oat": {"password": "crma74", "sheet_name": "‡∏ä‡∏±‡πâ‡∏ô4_‡∏û‡∏±‡∏ô4"},
    "time": {"password": "crma74", "sheet_name": "‡∏ä‡∏±‡πâ‡∏ô4_‡∏û‡∏±‡∏ô1"},
    "chai": {"password": "crma74", "sheet_name": "‡∏ä‡∏±‡πâ‡∏ô4_‡∏û‡∏±‡∏ô3"}
}

st.sidebar.title("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
username = st.sidebar.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
password = st.sidebar.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password")

if st.sidebar.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
    if username in users and users[username]["password"] == password:
        st.session_state["logged_in"] = True
        st.session_state["username"] = username
        st.session_state["sheet_name"] = users[username]["sheet_name"]
        st.rerun()  # ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    else:
        st.sidebar.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
if not st.session_state.get("logged_in"):
    st.stop()  # ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Sidebar ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
st.sidebar.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {st.session_state['username']}")
st.sidebar.success(f"‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• : {st.session_state['sheet_name']}")

# 1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
def connect_gsheet(sheet_name):
    creds_dict = st.secrets["gcp_service_account"]
    SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
    creds = service_account.Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1PfZdCw2iL65CPTZzNsCnkhF7EVJNFZHRvYAXqeOJsSk/edit?usp=drivesdk")
    worksheet = sheet.worksheet(sheet_name)
    return worksheet

worksheet = connect_gsheet(st.session_state["sheet_name"])

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û
st.markdown("""
    <style>
        .title-text {
            font-size: 36px;
            text-align: center;
            margin-top: 10px;
            color: #1f77b4;
            font-weight: bold;
        }
        .subtitle-text {
            text-align: center;
            font-size: 18px;
            color: #444;
            margin-bottom: 30px;
        }
        .card {
            background-color: #f9f9f9;
            padding: 20px;
            border-radius: 16px;
            text-align: center;
            box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
            transition: 0.2s ease-in-out;
        }
        .card:hover {
            box-shadow: 4px 4px 12px rgba(0,0,0,0.15);
            transform: scale(1.01);
        }
        .card h4 {
            margin-bottom: 10px;
            color: #333;
        }
        .stButton > button {
            font-size: 16px;
            padding: 8px 20px;
            border-radius: 10px;
            border: 1px solid #1f77b4;
            background-color: #eaf4ff;
            color: #1f77b4;
            font-weight: bold;
            transition: 0.3s ease;
        }
        .stButton > button:hover {
            background-color: #1f77b4;
            color: white;
        }
        hr {
            border: 1px solid #ccc;
            margin-top: 10px;
            margin-bottom: 25px;
        }
                @media (max-width: 768px) {
            .element-container .stColumns {
                flex-direction: column !important;
            }
            .element-container .stColumn {
                width: 100% !important;
                margin-bottom: 16px;
            }
        }
    </style>
    </style>
""", unsafe_allow_html=True)

st.image("assist.jpg", width=90)
st.markdown("<div class='title-text'>‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ ‡∏ù‡∏≠.1 <span style='color:#ff4b4b;'>J.A.R.V.I.S</span></div>", unsafe_allow_html=True)
st.markdown("<div class='subtitle-text'>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á</div>", unsafe_allow_html=True)
st.markdown("<hr>", unsafe_allow_html=True)

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö card layout
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("#### üõ° ‡πÄ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡∏ì‡πå")
    if st.button("‡∏î‡∏π-‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï", key="night_duty_btn"):
        st.session_state["mode"] = "night_duty"
    st.markdown("</div>", unsafe_allow_html=True)

with col2:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("#### üìÖ ‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Å‡∏≤‡∏£")
    if st.button("‡∏î‡∏π-‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï", key="weekend_duty_btn"):
        st.session_state["mode"] = "weekend_duty"
    st.markdown("</div>", unsafe_allow_html=True)

with col3:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("#### üèÖ ‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ")
    if st.button("‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î(‡∏™‡∏∏‡πà‡∏°)", key="ceremony_duty_btn"):
        st.session_state["mode"] = "ceremony_duty"
    st.markdown("</div>", unsafe_allow_html=True)

col4, col5, _ = st.columns([1, 1, 1])
with col4:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("#### üìù ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢")
    if st.button("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢", key="home_btn"):
        st.session_state["mode"] = "home"
    st.markdown("</div>", unsafe_allow_html=True)

with col5:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("#### üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î")
    if st.button("‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï-‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", key="count_btn"):
        st.session_state["mode"] = "count"
    st.markdown("</div>", unsafe_allow_html=True)


# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á UI ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
mode = st.session_state.get("mode", None)

if mode == "night_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ß‡∏£‡∏¢‡∏∑‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô")
        # ‡∏•‡∏¥‡∏á‡∏Å‡πå CSV export (‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ó‡πÅ‡∏£‡∏Å)
    csv_url = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/export?format=csv"

    try:
        # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
        sheet_option = st.radio(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏π‡∏ä‡∏µ‡∏ó",
            ("‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏ß‡∏£", "‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)"))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if sheet_option == "‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏ß‡∏£":
            iframe_link = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8pO9068jsukCJL0guT_dF7I5cjYMMIhsu7ah-1DkPxSMxnYFsSkuRgffvSUJKVZzQccQyJEOPxvvg/pubhtml?gid=0&single=true&range=A1:I100"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£
            edit_link = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/edit#gid=0"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏µ‡∏ó‡πÅ‡∏ó‡∏Å‡πÄ‡∏ß‡∏£
        else:
            iframe_link = "https://docs.google.com/spreadsheets/d/e/2PACX-1vR8pO9068jsukCJL0guT_dF7I5cjYMMIhsu7ah-1DkPxSMxnYFsSkuRgffvSUJKVZzQccQyJEOPxvvg/pubhtml?gid=2030248910&single=true&range=A1:I100"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
            edit_link = "https://docs.google.com/spreadsheets/d/1PjT38W2Zx7KV764yv9Vjwo9i0TJPacRI0iUGzP0ItAU/edit#gid=1"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡πÄ‡∏ß‡∏£ (‡∏™‡∏£‡∏∏‡∏õ)
        
        # ‡∏Å‡∏≤‡∏£‡∏ù‡∏±‡∏á iframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        st.markdown(f"""
            <style>
                .iframe-container {{
                    border: 2px solid #4CAF50;
                    border-radius: 10px;
                    overflow: hidden;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }}
                .iframe-container iframe {{
                    width: 100%;
                    height: 600px;
                    border: none;
                    zoom: 0.75;
                }}
                .edit-link {{
                    text-align: right;
                    margin-top: 10px;
                    background-color: #4CAF50;
                    padding: 10px;
                    border-radius: 8px;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                }}
                .edit-link a {{
                    color: white;
                    font-size: 16px;
                    text-decoration: none;
                    font-weight: bold;
                    transition: all 0.3s ease;
                }}
                .edit-link a:hover {{
                    color: #FFEB3B;
                    text-decoration: underline;
                }}
            </style>
            <div class="iframe-container">
                <iframe src="{iframe_link}"></iframe>
            </div>
            <div class="edit-link">
                <a href="{edit_link}" target="_blank">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Google Sheets ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</a>
            </div>
        """, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

elif mode == "weekend_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ß‡∏£‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå")
    st.markdown("https://docs.google.com/spreadsheets/d/1ufm0LPa4c903jhlANKn_YqNyMtG9id0iN-tMHrhNRA8/edit?gid=1888956716#gid=1888956716")

elif mode == "home":
    st.header("üìã ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢")

    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏õ‡∏•‡πà‡∏≠‡∏¢", date.today())
    with col2:
        end_date = st.date_input("‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏£.", date.today())
    
    # ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ
    defaults = {5: 67, 4: 101, 3: 94, 2: 85}
    categories = ["‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô","‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    
    # ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    st.subheader("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡πÄ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ")
    data = {}
    for year in [5, 4, 3, 2]:
        data[year] = {}
        with st.expander(f"‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {year}"):
            for cat in categories:
                val = st.number_input(f"{cat} ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {year}", min_value=0, step=1, key=f"{cat}_{year}")
                data[year][cat] = val
    
    # ‡∏õ‡∏∏‡πà‡∏° "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" ‡πÅ‡∏•‡∏∞ "‡∏ó‡∏≥‡πÑ‡∏ü‡∏•‡πå" ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ CSS
    col1, col2 = st.columns([1, 1])
    
    with col1:
        generate = st.button("üìò ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")
    
    with col2:
        st.markdown("""
            <style>
            .stButton>button.export-link {
                background-color: #28a745;
                color: white;
                border-radius: 6px;
                padding: 0.4em 1em;
                border: none;
                font-size: 14px;
            }
            .stButton>button.export-link:hover {
                background-color: #218838;
                color: white;
            }
            </style>
            <a href="https://docs.google.com/spreadsheets/d/1_kKUegxtwwd3ce3EduPqRoPpgAF1_IcecA1ri9Pfxz0/edit?gid=351113778#gid=351113778" target="_blank">
                <button class="export-link">üìó ‡∏ó‡∏≥‡πÑ‡∏ü‡∏•‡πå</button>
            </a>
        """, unsafe_allow_html=True)
    
    # ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    if generate:
        st.success("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    
        lines = []
        start_str = start_date.strftime("%-d %b").replace("May", "‡∏û.‡∏Ñ.").replace("Jun", "‡∏°‡∏¥.‡∏¢.")
        end_str = end_date.strftime("%-d %b %y").replace("May", "‡∏û.‡∏Ñ.").replace("Jun", "‡∏°‡∏¥.‡∏¢.")
    
        lines.append(f"‡∏û‡∏±‡∏ô.4 ‡∏Å‡∏£‡∏° ‡∏ô‡∏ô‡∏£.‡∏£‡∏≠. ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏™‡πà‡∏á‡∏¢‡∏≠‡∏î ‡∏ô‡∏ô‡∏£. ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô, ‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà   {start_str} - {end_str} ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ")
    
        for y in [5, 4, 3, 2]:
            lines.append(f"‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏° {defaults[y]} ‡∏ô‡∏≤‡∏¢")
    
        def section(title, key):
            lines.append(f"{key+1}.{title}")
            total = 0
            for y in [5, 4, 3, 2]:
                val = data[y].get(title, 0)
                total += val
                show_val = f"{val}" if val != 0 else "-"
                lines.append(f"   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {show_val} ‡∏ô‡∏≤‡∏¢")
            show_total = f"{total}" if total != 0 else "-"
            lines.append(f"   -‡∏£‡∏ß‡∏° {show_total} ‡∏ô‡∏≤‡∏¢")
    
        # 1. ‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ö‡πâ‡∏≤‡∏ô
        lines.append("1.‡∏¢‡∏≠‡∏î‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏û‡∏±‡∏Å‡∏ö‡πâ‡∏≤‡∏ô")
        total_home = 0
        for y in [5, 4, 3, 2]:
            sum_others = sum(data[y].values())
            val = defaults[y] - sum_others
            total_home += val
            lines.append(f"   -‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà {y} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {val} ‡∏ô‡∏≤‡∏¢")
        lines.append(f"   -‡∏£‡∏ß‡∏° {total_home} ‡∏ô‡∏≤‡∏¢")
    
        for i, cat in enumerate(["‡∏≠‡∏¢‡∏π‡πà‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÄ‡∏ß‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°", "‡∏Å‡∏±‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì", "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•", "‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", "‡∏•‡∏≤", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"], start=2):
            section(cat, i)
        lines.append("‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏£‡∏≤‡∏ö")
    
        st.text_area("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î", value="\n".join(lines), height=600)


elif mode == "count":
    ‡∏¢‡∏≠‡∏î_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î (.xlsx)", type="xlsx")

    if ‡∏¢‡∏≠‡∏î_file:
        try:
            ‡∏¢‡∏≠‡∏î_df = pd.read_excel(‡∏¢‡∏≠‡∏î_file, header=None, skiprows=3)
            ‡∏¢‡∏≠‡∏î_df = ‡∏¢‡∏≠‡∏î_df.dropna(how='all')
        except Exception as e:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
            st.stop()

        if ‡∏¢‡∏≠‡∏î_df.shape[1] >= 4:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Google Sheet
            ‡∏¢‡∏≠‡∏î_df["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] = ‡∏¢‡∏≠‡∏î_df.iloc[:, 2].astype(str).str.strip() + " " + ‡∏¢‡∏≠‡∏î_df.iloc[:, 3].astype(str).str.strip()

            # ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡∏≥‡∏î‡∏±‡∏ö, ‡∏ä‡∏∑‡πà‡∏≠, ‡∏™‡∏Å‡∏∏‡∏•
            preview_df = pd.DataFrame({
                "‡∏•‡∏≥‡∏î‡∏±‡∏ö": ‡∏¢‡∏≠‡∏î_df.iloc[:, 0],
                "‡∏ä‡∏∑‡πà‡∏≠": ‡∏¢‡∏≠‡∏î_df.iloc[:, 2],
                "‡∏™‡∏Å‡∏∏‡∏•": ‡∏¢‡∏≠‡∏î_df.iloc[:, 3],})
            st.info("üëÄ ‡∏û‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î:")
            st.dataframe(preview_df, use_container_width=True)

            # Slider ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢
            ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ = st.slider("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏ô‡∏µ‡πâ (1‚Äì5)", 1, 5, 3)

            # ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ï‡πâ‡∏°
            if st.button("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Google Sheets"):
                # 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet
                ws = connect_gsheet()
                gsheet_data = ws.get_all_values()

                # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏û‡∏£‡πâ‡∏≠‡∏° header
                gsheet_df = pd.DataFrame(gsheet_data)
                gsheet_df.columns = gsheet_df.iloc[0]
                gsheet_df = gsheet_df[1:].reset_index(drop=True)

                # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
                gsheet_df["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] = gsheet_df.iloc[:, 2].astype(str).str.strip() + " " + gsheet_df.iloc[:, 3].astype(str).str.strip()

                # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î'
                if "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î" not in gsheet_df.columns:
                    gsheet_df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] = 0
                gsheet_df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] = pd.to_numeric(gsheet_df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"], errors='coerce').fillna(0).astype(int)

                # 5. ‡∏ö‡∏ß‡∏Å‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏¢‡∏≠‡∏î
                gsheet_df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] = gsheet_df.apply(lambda row: row["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] + ‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ if row["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"] in ‡∏¢‡∏≠‡∏î_df["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°"].values else row["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"],axis=1)

                # 6. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå N
                updated_column_values = gsheet_df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"].astype(str).tolist()
                start_cell = 'N2'
                end_cell = f'N{1 + len(updated_column_values)}'
                cell_range = f'{start_cell}:{end_cell}'
                ws.update(cell_range, [[val] for val in updated_column_values])

                st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.markdown("[üîó ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π Google Sheets](https://docs.google.com/spreadsheets/d/e/2PACX-1vSf6OB3YE98NPUBjuN7c7tdp93kmj0kEAQMvMiu4FECY4OgbQgQ-AWwz31TcabtrlzWPgcilDmsG4uZ/pubhtml)")
        else:
            st.error("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏≠‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A‚ÄìD ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")



# ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå "‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ"

elif mode == "ceremony_duty":
    st.info("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ")

    sheet = connect_gsheet(st.session_state["sheet_name"])
    data = sheet.get_all_values()
    df = pd.DataFrame(data[1:], columns=data[0])  # ‡∏Ç‡πâ‡∏≤‡∏° header ‡πÅ‡∏£‡∏Å

    if "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î" in df.columns:
        df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"] = pd.to_numeric(df["‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î"], errors="coerce").fillna(0)

    ‡∏¢‡∏≠‡∏î_name = st.text_input("üîñ‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≠‡∏î")
    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô = st.number_input("üë•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô", min_value=1, step=1)

    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà = ["‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏°", "‡∏ä‡∏±‡πâ‡∏ô‡∏û‡∏±‡∏ô", "‡∏ù‡∏≠.1", "‡∏ù‡∏≠.4", "‡∏ù‡∏≠.5", "‡πÄ‡πÄ‡∏ã‡∏ô‡πÄ‡∏Æ‡∏¥‡∏£‡πå‡∏ó", "‡∏≠‡∏¥‡∏™‡∏•‡∏≤‡∏°", "‡∏Ñ‡∏£‡∏¥‡∏™‡∏ï‡πå"]
    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà_‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
    ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å = st.multiselect("‚õî‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà_‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    
    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏ä‡∏°‡∏£‡∏° = ["‡∏Å‡∏£‡∏µ‡∏ë‡∏≤", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô", "‡πÑ‡∏ã‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡πÑ‡∏ó‡∏¢", "‡∏î‡∏ô‡∏ï‡∏£‡∏µ‡∏™‡∏≤‡∏Å‡∏•", "‡∏î‡∏≤‡∏ö‡∏™‡∏≤‡∏Å‡∏•", "‡∏ô‡∏¥‡πÄ‡∏ó‡∏®", "‡∏™‡∏ï‡∏™", "‡∏ö‡∏≤‡∏™", "‡πÇ‡∏õ‡πÇ‡∏•‡∏ô‡πâ‡∏≥", "‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", "‡∏¢‡∏π‡πÇ‡∏î", "‡∏£‡∏±‡∏Å‡∏ö‡∏µ‡πâ", "‡πÅ‡∏ö‡∏ï‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô"]
    ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏ä‡∏°‡∏£‡∏°_‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = ["‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏ä‡∏°‡∏£‡∏°
    excluded_clubs = st.multiselect("‚õî‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏°‡∏£‡∏°", ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏ä‡∏°‡∏£‡∏°_‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    
    if st.button("üì§ ‡∏à‡∏±‡∏î‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå"):
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà = ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà if "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å else ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà_‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        filtered_clubs = ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å_‡∏ä‡∏°‡∏£‡∏° if "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" in excluded_clubs else excluded_clubs

        df_filtered = df.copy()
        if "‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" in df_filtered.columns and ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:
            df_filtered = df_filtered[~df_filtered["‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà"].isin(‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á_‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)]
        if "‡∏ä‡∏°‡∏£‡∏°" in df_filtered.columns and filtered_clubs:
            df_filtered = df_filtered[~df_filtered["‡∏ä‡∏°‡∏£‡∏°"].isin(filtered_clubs)]
        if "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î" in df_filtered.columns:
            df_filtered = df_filtered.sort_values(by="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏ô‡∏¢‡∏≠‡∏î", ascending=True)

        grouped = df_filtered.groupby("‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î")
        ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î_list = list(grouped.groups.keys())
        ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î = defaultdict(list)

        while sum(len(v) for v in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values()) < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô:
            for ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î in ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î_list:
                available = grouped.get_group(‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î)
                used_indices = set().union(*‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values())
                choices = available[~available.index.isin(used_indices)]
                if not choices.empty and sum(len(v) for v in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values()) < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô:
                    chosen = choices.sample(1)
                    ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î[‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î].append(chosen.index[0])

        selected_indices = [i for indices in ‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î.values() for i in indices]
        selected_df = df.loc[selected_indices]
        selected_df = selected_df.reset_index(drop=True)
        selected_df.index += 1

        if "‡∏•‡∏≥‡∏î‡∏±‡∏ö" in selected_df.columns:
            selected_df = selected_df.drop(columns=["‡∏•‡∏≥‡∏î‡∏±‡∏ö"])
        selected_df.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", selected_df.index)

        selected_df["‡∏¢‡∏®"] = "‡∏ô‡∏ô‡∏£."
        selected_df["‡∏ä‡∏∑‡πà‡∏≠"] = selected_df.iloc[:, 2].fillna("")
        selected_df["‡∏™‡∏Å‡∏∏‡∏•"] = selected_df.iloc[:, 3].fillna("")
        selected_df["‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"] = selected_df["‡∏¢‡∏®"] + " " + selected_df["‡∏ä‡∏∑‡πà‡∏≠"] + " " + selected_df["‡∏™‡∏Å‡∏∏‡∏•"]

        columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà", "‡∏ï‡∏≠‡∏ô", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
        output_df = selected_df[columns]
        
        # ‡πÉ‡∏™‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ render_centered_table
        def render_centered_table(df):
            html = """
            <style>
                table.custom-table {
                    width: 100%;
                    border-collapse: collapse;
                    table-layout: auto;
                    font-size: 11px;
                }
                table.custom-table th, table.custom-table td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: center;
                    height: 40px;
                }
                table.custom-table th {
                    font-weight: bold;
                }
                table.custom-table th:nth-child(1), table.custom-table td:nth-child(1) { width: 5%; }
                table.custom-table th:nth-child(2), table.custom-table td:nth-child(2) { width: 20%; }
                table.custom-table th:nth-child(3), table.custom-table td:nth-child(3) { width: 8%; }
                table.custom-table th:nth-child(4), table.custom-table td:nth-child(4) { width: 5%; }
                table.custom-table th:nth-child(5), table.custom-table td:nth-child(5) { width: 15%; }
                table.custom-table th:nth-child(6), table.custom-table td:nth-child(6) { width: 15%; }
                table.custom-table th:nth-child(7), table.custom-table td:nth-child(7) { width: 10%; }
                table.custom-table td:nth-child(2) {
                    text-align: left;
                    padding-left: 10px;
                }
            </style>
            """
            html += "<table class='custom-table'>"
            html += "<thead><tr>" + "".join(f"<th>{col}</th>" for col in df.columns) + "</tr></thead>"
            html += "<tbody>"
            for _, row in df.iterrows():
                html += "<tr>"
                for i, cell in enumerate(row):
                    value = "" if pd.isna(cell) and i == 6 else cell
                    html += f"<td>{value}</td>"
                html += "</tr>"
            html += "</tbody></table>"
            st.markdown(html, unsafe_allow_html=True)

        render_centered_table(output_df)
        
        wb = Workbook()
        ws = wb.active
        ws.title = "‡∏¢‡∏≠‡∏î‡∏û‡∏¥‡∏ò‡∏µ"
        ws.append([‡∏¢‡∏≠‡∏î_name])
        ws.append([])
        ws.append(columns)
        ws.merge_cells('A2:I2')

        selected_df["‡∏¢‡∏®"] = "‡∏ô‡∏ô‡∏£."
        selected_df["‡∏ä‡∏∑‡πà‡∏≠"] = selected_df.iloc[:, 2]
        selected_df["‡∏™‡∏Å‡∏∏‡∏•"] = selected_df.iloc[:, 3]
        columns_excel = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡∏¢‡∏®", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏™‡∏Å‡∏∏‡∏•", "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà", "‡∏ï‡∏≠‡∏ô", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"]
        output_df_excel = selected_df[columns_excel]

        ws.merge_cells(start_row=3, start_column=2, end_row=3, end_column=4)
        ws.cell(row=3, column=2).value = "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"
        ws.cell(row=3, column=2).alignment = Alignment(horizontal='center', vertical='center')
        ws.cell(row=3, column=5).value = "‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà"
        ws.cell(row=3, column=6).value = "‡∏ï‡∏≠‡∏ô"
        ws.cell(row=3, column=7).value = "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
        ws.cell(row=3, column=8).value = "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î"
        ws.cell(row=3, column=9).value = "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"

        for r in dataframe_to_rows(output_df_excel, index=False, header=False):
            ws.append(r)

        thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
        for row in ws.iter_rows(min_row=2):
            for idx, cell in enumerate(row[:9]):
                if idx < 1 or idx > 3:
                    cell.alignment = Alignment(horizontal='center', vertical='center')
                cell.border = thin_border

        ws.column_dimensions['A'].width = 6
        ws.column_dimensions['B'].width = 5
        ws.column_dimensions['C'].width = 15
        ws.column_dimensions['D'].width = 15
        ws.column_dimensions['E'].width = 8
        ws.column_dimensions['F'].width = 8
        ws.column_dimensions['G'].width = 20
        ws.column_dimensions['H'].width = 15
        ws.column_dimensions['I'].width = 15
        ws.merge_cells('A1:I1')
        ws['A1'].alignment = Alignment(horizontal='center', vertical='center')
        for cell in ws[1]:
            cell.alignment = Alignment(horizontal='center', vertical='center')
            cell.border = thin_border

        output_filename = f"{‡∏¢‡∏≠‡∏î_name}.xlsx"
        wb.save(output_filename)
        st.success(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {output_filename}")
        with open(output_filename, "rb") as f:
            st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", f, file_name=output_filename)

st.markdown("<hr style='border:0.5px solid #ccc;'>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>J.A.R.V.I.S ¬© 2025 | Dev by Oat</p>", unsafe_allow_html=True)


